setorder(pif_temp,dem_index)
pif_scen[[pif_name]] <- (pif_ref[,2] - pif_temp[,2]) / pif_ref[,2]
# Calculate ylls
#yll_dfs <- combine_health_and_pif(pif_values=pif_scen[[pif_name]], hc = gbd_ylls_disease)
#ylls[[yll_name]] <- yll_dfs[,V1]
# Calculate deaths
#death_dfs <- combine_health_and_pif(pif_values=pif_scen[[pif_name]],hc=gbd_deaths_disease)
#deaths[[deaths_name]] <- death_dfs[,V1]
}
}
}
pif_scen
### iterating over all all disease outcomes
for ( j in 1:nrow(DISEASE_INVENTORY)){
# Disease acronym and full name
ac <- as.character(DISEASE_INVENTORY$acronym[j])
gbd_dn <- as.character(DISEASE_INVENTORY$GBD_name[j])
# calculating health outcome, or independent pathways?
pathways_to_calculate <- ifelse(combined_AP_PA,1,DISEASE_INVENTORY$physical_activity[j]+DISEASE_INVENTORY$air_pollution[j])
for(path in 1:pathways_to_calculate){
# set up column names
if(combined_AP_PA){
middle_bit <-
paste0(
ifelse(DISEASE_INVENTORY$physical_activity[j] == 1, 'pa_', ''),
ifelse(DISEASE_INVENTORY$air_pollution[j] == 1, 'ap_', '')
)
}else{
# if independent, choose which one
middle_bit <- c('pa_','ap_')[which(c(DISEASE_INVENTORY$physical_activity[j],DISEASE_INVENTORY$air_pollution[j])==1)[path]]
}
base_var <- paste0('RR_', middle_bit, reference_scenario, '_', ac)
scen_vars <- paste0('RR_', middle_bit, scen_names, '_', ac)
# subset gbd data
gbd_deaths_disease <- subset(gbd_deaths,cause==gbd_dn)
gbd_ylls_disease <- subset(gbd_ylls,cause==gbd_dn)
# set up pif tables
pif_table <- setDT(ind_ap_pa[,colnames(ind_ap_pa)%in%c(base_var,'dem_index')])
setnames(pif_table,base_var,'outcome')
pif_ref <- pif_table[,.(sum(outcome)),by='dem_index']
## sort pif_ref
setorder(pif_ref,dem_index)
for (index in 1:length(scen_vars)){
# set up naming conventions
scen <- scen_names[index]
scen_var <- scen_vars[index]
pif_name <- paste0(scen, '_pif_',middle_bit,ac)
yll_name <- paste0(scen, '_ylls_',middle_bit,ac)
deaths_name <- paste0(scen, '_deaths_',middle_bit,ac)
# Calculate PIFs for selected scenario
pif_table <- setDT(ind_ap_pa[,colnames(ind_ap_pa)%in%c(scen_var,'dem_index')])
setnames(pif_table,scen_var,'outcome')
pif_temp <- pif_table[,.(sum(outcome)),by='dem_index']
## sort pif_temp
setorder(pif_temp,dem_index)
print(pif_name)
pif_scen[[pif_name]] <- (pif_ref[,2] - pif_temp[,2]) / pif_ref[,2]
# Calculate ylls
#yll_dfs <- combine_health_and_pif(pif_values=pif_scen[[pif_name]], hc = gbd_ylls_disease)
#ylls[[yll_name]] <- yll_dfs[,V1]
# Calculate deaths
#death_dfs <- combine_health_and_pif(pif_values=pif_scen[[pif_name]],hc=gbd_deaths_disease)
#deaths[[deaths_name]] <- death_dfs[,V1]
}
}
}
for(path in 1:pathways_to_calculate){
# set up column names
if(combined_AP_PA){
middle_bit <-
paste0(
ifelse(DISEASE_INVENTORY$physical_activity[j] == 1, 'pa_', ''),
ifelse(DISEASE_INVENTORY$air_pollution[j] == 1, 'ap_', '')
)
}else{
# if independent, choose which one
middle_bit <- c('pa_','ap_')[which(c(DISEASE_INVENTORY$physical_activity[j],DISEASE_INVENTORY$air_pollution[j])==1)[path]]
}
base_var <- paste0('RR_', middle_bit, reference_scenario, '_', ac)
scen_vars <- paste0('RR_', middle_bit, scen_names, '_', ac)
# subset gbd data
gbd_deaths_disease <- subset(gbd_deaths,cause==gbd_dn)
gbd_ylls_disease <- subset(gbd_ylls,cause==gbd_dn)
# set up pif tables
pif_table <- setDT(ind_ap_pa[,colnames(ind_ap_pa)%in%c(base_var,'dem_index')])
setnames(pif_table,base_var,'outcome')
pif_ref <- pif_table[,.(sum(outcome)),by='dem_index']
## sort pif_ref
setorder(pif_ref,dem_index)
for (index in 1:length(scen_vars)){
# set up naming conventions
scen <- scen_names[index]
scen_var <- scen_vars[index]
pif_name <- paste0(scen, '_pif_',middle_bit,ac)
yll_name <- paste0(scen, '_ylls_',middle_bit,ac)
deaths_name <- paste0(scen, '_deaths_',middle_bit,ac)
# Calculate PIFs for selected scenario
pif_table <- setDT(ind_ap_pa[,colnames(ind_ap_pa)%in%c(scen_var,'dem_index')])
setnames(pif_table,scen_var,'outcome')
pif_temp <- pif_table[,.(sum(outcome)),by='dem_index']
## sort pif_temp
setorder(pif_temp,dem_index)
print(pif_name)
pif_scen[[pif_name]] <- (pif_ref[,2] - pif_temp[,2]) / pif_ref[,2]
print(pif_scen)
# Calculate ylls
#yll_dfs <- combine_health_and_pif(pif_values=pif_scen[[pif_name]], hc = gbd_ylls_disease)
#ylls[[yll_name]] <- yll_dfs[,V1]
# Calculate deaths
#death_dfs <- combine_health_and_pif(pif_values=pif_scen[[pif_name]],hc=gbd_deaths_disease)
#deaths[[deaths_name]] <- death_dfs[,V1]
}
}
deaths <- ylls <- pif_scen <- pop_details
pif_scen
# set up reference (scen1)
reference_scenario <- SCEN_SHORT_NAME[which(SCEN==REFERENCE_SCENARIO)]
scen_names <- SCEN_SHORT_NAME[SCEN_SHORT_NAME!=reference_scenario]
### iterating over all all disease outcomes
for ( j in 1:nrow(DISEASE_INVENTORY)){
# Disease acronym and full name
ac <- as.character(DISEASE_INVENTORY$acronym[j])
gbd_dn <- as.character(DISEASE_INVENTORY$GBD_name[j])
# calculating health outcome, or independent pathways?
pathways_to_calculate <- ifelse(combined_AP_PA,1,DISEASE_INVENTORY$physical_activity[j]+DISEASE_INVENTORY$air_pollution[j])
for(path in 1:pathways_to_calculate){
# set up column names
if(combined_AP_PA){
middle_bit <-
paste0(
ifelse(DISEASE_INVENTORY$physical_activity[j] == 1, 'pa_', ''),
ifelse(DISEASE_INVENTORY$air_pollution[j] == 1, 'ap_', '')
)
}else{
# if independent, choose which one
middle_bit <- c('pa_','ap_')[which(c(DISEASE_INVENTORY$physical_activity[j],DISEASE_INVENTORY$air_pollution[j])==1)[path]]
}
base_var <- paste0('RR_', middle_bit, reference_scenario, '_', ac)
scen_vars <- paste0('RR_', middle_bit, scen_names, '_', ac)
# subset gbd data
gbd_deaths_disease <- subset(gbd_deaths,cause==gbd_dn)
gbd_ylls_disease <- subset(gbd_ylls,cause==gbd_dn)
# set up pif tables
pif_table <- setDT(ind_ap_pa[,colnames(ind_ap_pa)%in%c(base_var,'dem_index')])
setnames(pif_table,base_var,'outcome')
pif_ref <- pif_table[,.(sum(outcome)),by='dem_index']
## sort pif_ref
setorder(pif_ref,dem_index)
for (index in 1:length(scen_vars)){
# set up naming conventions
scen <- scen_names[index]
scen_var <- scen_vars[index]
pif_name <- paste0(scen, '_pif_',middle_bit,ac)
yll_name <- paste0(scen, '_ylls_',middle_bit,ac)
deaths_name <- paste0(scen, '_deaths_',middle_bit,ac)
# Calculate PIFs for selected scenario
pif_table <- setDT(ind_ap_pa[,colnames(ind_ap_pa)%in%c(scen_var,'dem_index')])
setnames(pif_table,scen_var,'outcome')
pif_temp <- pif_table[,.(sum(outcome)),by='dem_index']
## sort pif_temp
setorder(pif_temp,dem_index)
print(pif_name)
pif_scen[[pif_name]] <- (pif_ref[,2] - pif_temp[,2]) / pif_ref[,2]
print(pif_scen)
# Calculate ylls
#yll_dfs <- combine_health_and_pif(pif_values=pif_scen[[pif_name]], hc = gbd_ylls_disease)
#ylls[[yll_name]] <- yll_dfs[,V1]
# Calculate deaths
#death_dfs <- combine_health_and_pif(pif_values=pif_scen[[pif_name]],hc=gbd_deaths_disease)
#deaths[[deaths_name]] <- death_dfs[,V1]
}
}
}
(pif_ref[,2] - pif_temp[,2]) / pif_ref[,2]
pif_ref[,2]
pif_temp[,2]
pif_ref[,2]
(pif_ref[,V1] - pif_temp[,V1]) / pif_ref[,V1]
### iterating over all all disease outcomes
for ( j in 1:nrow(DISEASE_INVENTORY)){
# Disease acronym and full name
ac <- as.character(DISEASE_INVENTORY$acronym[j])
gbd_dn <- as.character(DISEASE_INVENTORY$GBD_name[j])
# calculating health outcome, or independent pathways?
pathways_to_calculate <- ifelse(combined_AP_PA,1,DISEASE_INVENTORY$physical_activity[j]+DISEASE_INVENTORY$air_pollution[j])
for(path in 1:pathways_to_calculate){
# set up column names
if(combined_AP_PA){
middle_bit <-
paste0(
ifelse(DISEASE_INVENTORY$physical_activity[j] == 1, 'pa_', ''),
ifelse(DISEASE_INVENTORY$air_pollution[j] == 1, 'ap_', '')
)
}else{
# if independent, choose which one
middle_bit <- c('pa_','ap_')[which(c(DISEASE_INVENTORY$physical_activity[j],DISEASE_INVENTORY$air_pollution[j])==1)[path]]
}
base_var <- paste0('RR_', middle_bit, reference_scenario, '_', ac)
scen_vars <- paste0('RR_', middle_bit, scen_names, '_', ac)
# subset gbd data
gbd_deaths_disease <- subset(gbd_deaths,cause==gbd_dn)
gbd_ylls_disease <- subset(gbd_ylls,cause==gbd_dn)
# set up pif tables
pif_table <- setDT(ind_ap_pa[,colnames(ind_ap_pa)%in%c(base_var,'dem_index')])
setnames(pif_table,base_var,'outcome')
pif_ref <- pif_table[,.(sum(outcome)),by='dem_index']
## sort pif_ref
setorder(pif_ref,dem_index)
for (index in 1:length(scen_vars)){
# set up naming conventions
scen <- scen_names[index]
scen_var <- scen_vars[index]
pif_name <- paste0(scen, '_pif_',middle_bit,ac)
yll_name <- paste0(scen, '_ylls_',middle_bit,ac)
deaths_name <- paste0(scen, '_deaths_',middle_bit,ac)
# Calculate PIFs for selected scenario
pif_table <- setDT(ind_ap_pa[,colnames(ind_ap_pa)%in%c(scen_var,'dem_index')])
setnames(pif_table,scen_var,'outcome')
pif_temp <- pif_table[,.(sum(outcome)),by='dem_index']
## sort pif_temp
setorder(pif_temp,dem_index)
print(pif_name)
pif_scen[[pif_name]] <- (pif_ref[,V1] - pif_temp[,V1]) / pif_ref[,V1]
print(pif_scen)
# Calculate ylls
#yll_dfs <- combine_health_and_pif(pif_values=pif_scen[[pif_name]], hc = gbd_ylls_disease)
#ylls[[yll_name]] <- yll_dfs[,V1]
# Calculate deaths
#death_dfs <- combine_health_and_pif(pif_values=pif_scen[[pif_name]],hc=gbd_deaths_disease)
#deaths[[deaths_name]] <- death_dfs[,V1]
}
}
}
#' @export
health_burden_2 <- function(ind_ap_pa,inj,combined_AP_PA=T){
# subset gbd data for outcome types
gbd_data_scaled <- DISEASE_BURDEN
#gbd_data_scaled$burden[gbd_data_scaled$cause%in%c("Neoplasms","Ischemic heart disease","Tracheal, bronchus, and lung cancer","Breast cancer","Colon and rectum cancer","Uterine cancer")] <-
#  gbd_data_scaled$burden[gbd_data_scaled$cause%in%c("Neoplasms","Ischemic heart disease","Tracheal, bronchus, and lung cancer","Breast cancer","Colon and rectum cancer","Uterine cancer")]*CHRONIC_DISEASE_SCALAR
## chronic disease scalar scales all diseases
gbd_data_scaled$burden <- gbd_data_scaled$burden*CHRONIC_DISEASE_SCALAR
gbd_deaths <- subset(gbd_data_scaled,measure=='Deaths')
gbd_ylls <- subset(gbd_data_scaled,measure=='YLLs (Years of Life Lost)')
pop_details <- DEMOGRAPHIC
deaths <- ylls <- pif_scen <- pop_details
# set up reference (scen1)
reference_scenario <- SCEN_SHORT_NAME[which(SCEN==REFERENCE_SCENARIO)]
scen_names <- SCEN_SHORT_NAME[SCEN_SHORT_NAME!=reference_scenario]
### iterating over all all disease outcomes
for ( j in 1:nrow(DISEASE_INVENTORY)){
# Disease acronym and full name
ac <- as.character(DISEASE_INVENTORY$acronym[j])
gbd_dn <- as.character(DISEASE_INVENTORY$GBD_name[j])
# calculating health outcome, or independent pathways?
pathways_to_calculate <- ifelse(combined_AP_PA,1,DISEASE_INVENTORY$physical_activity[j]+DISEASE_INVENTORY$air_pollution[j])
for(path in 1:pathways_to_calculate){
# set up column names
if(combined_AP_PA){
middle_bit <-
paste0(
ifelse(DISEASE_INVENTORY$physical_activity[j] == 1, 'pa_', ''),
ifelse(DISEASE_INVENTORY$air_pollution[j] == 1, 'ap_', '')
)
}else{
# if independent, choose which one
middle_bit <- c('pa_','ap_')[which(c(DISEASE_INVENTORY$physical_activity[j],DISEASE_INVENTORY$air_pollution[j])==1)[path]]
}
base_var <- paste0('RR_', middle_bit, reference_scenario, '_', ac)
scen_vars <- paste0('RR_', middle_bit, scen_names, '_', ac)
# subset gbd data
gbd_deaths_disease <- subset(gbd_deaths,cause==gbd_dn)
gbd_ylls_disease <- subset(gbd_ylls,cause==gbd_dn)
# set up pif tables
pif_table <- setDT(ind_ap_pa[,colnames(ind_ap_pa)%in%c(base_var,'dem_index')])
setnames(pif_table,base_var,'outcome')
pif_ref <- pif_table[,.(sum(outcome)),by='dem_index']
## sort pif_ref
setorder(pif_ref,dem_index)
for (index in 1:length(scen_vars)){
# set up naming conventions
scen <- scen_names[index]
scen_var <- scen_vars[index]
pif_name <- paste0(scen, '_pif_',middle_bit,ac)
yll_name <- paste0(scen, '_ylls_',middle_bit,ac)
deaths_name <- paste0(scen, '_deaths_',middle_bit,ac)
# Calculate PIFs for selected scenario
pif_table <- setDT(ind_ap_pa[,colnames(ind_ap_pa)%in%c(scen_var,'dem_index')])
setnames(pif_table,scen_var,'outcome')
pif_temp <- pif_table[,.(sum(outcome)),by='dem_index']
## sort pif_temp
setorder(pif_temp,dem_index)
pif_scen[[pif_name]] <- (pif_ref[,V1] - pif_temp[,V1]) / pif_ref[,V1]
}
}
}
return(pif_scen)
}
(pif_table <- health_burden_2(RR_PA_AP_calculations,deaths_yll_injuries$deaths_yll_injuries))
for(scen in 1:NSCEN+1)
for(i in 2:ncol(injury_ratios_for_bz[[scen]])) {
injury_col_name <- colnames(injury_ratios_for_bz[[scen]])[i]
pif_table[[paste0(SCEN_SHORT_NAME[scen],'_',injury_col_name)]] <- injury_ratios_for_bz[[scen]][[i]]/injury_ratios_for_bz[[1]][[i]]
}
pif_table
colnames(pif_table)
#' @export
belens_function <- function(pif_table){pif_table}
pathway_pif_table <- health_burden_2(RR_PA_AP_calculations,deaths_yll_injuries$deaths_yll_injuries,combined_AP_PA=F)
pathway_pif_table
pif_table$scen_pif_pa_ap_ihd
1-(1-pathway_pif_table$scen_pif_pa_ihd)*(1-pathway_pif_table$scen_pif_ap_ihd)
x11(); plot(pif_table$scen_pif_pa_ap_ihd,1-(1-pathway_pif_table$scen_pif_pa_ihd)*(1-pathway_pif_table$scen_pif_ap_ihd))
pif_table
hb_2 <- belens_function(pif_table)
#' @export
health_burden_2 <- function(ind_ap_pa,combined_AP_PA=T){
pop_details <- DEMOGRAPHIC
pif_scen <- pop_details
# set up reference (scen1)
reference_scenario <- SCEN_SHORT_NAME[which(SCEN==REFERENCE_SCENARIO)]
scen_names <- SCEN_SHORT_NAME[SCEN_SHORT_NAME!=reference_scenario]
### iterating over all all disease outcomes
for ( j in 1:nrow(DISEASE_INVENTORY)){
# Disease acronym and full name
ac <- as.character(DISEASE_INVENTORY$acronym[j])
gbd_dn <- as.character(DISEASE_INVENTORY$GBD_name[j])
# calculating health outcome, or independent pathways?
pathways_to_calculate <- ifelse(combined_AP_PA,1,DISEASE_INVENTORY$physical_activity[j]+DISEASE_INVENTORY$air_pollution[j])
for(path in 1:pathways_to_calculate){
# set up column names
if(combined_AP_PA){
middle_bit <-
paste0(
ifelse(DISEASE_INVENTORY$physical_activity[j] == 1, 'pa_', ''),
ifelse(DISEASE_INVENTORY$air_pollution[j] == 1, 'ap_', '')
)
}else{
# if independent, choose which one
middle_bit <- c('pa_','ap_')[which(c(DISEASE_INVENTORY$physical_activity[j],DISEASE_INVENTORY$air_pollution[j])==1)[path]]
}
base_var <- paste0('RR_', middle_bit, reference_scenario, '_', ac)
scen_vars <- paste0('RR_', middle_bit, scen_names, '_', ac)
# set up pif tables
pif_table <- setDT(ind_ap_pa[,colnames(ind_ap_pa)%in%c(base_var,'dem_index')])
setnames(pif_table,base_var,'outcome')
pif_ref <- pif_table[,.(sum(outcome)),by='dem_index']
## sort pif_ref
setorder(pif_ref,dem_index)
for (index in 1:length(scen_vars)){
# set up naming conventions
scen <- scen_names[index]
scen_var <- scen_vars[index]
pif_name <- paste0(scen, '_pif_',middle_bit,ac)
# Calculate PIFs for selected scenario
pif_table <- setDT(ind_ap_pa[,colnames(ind_ap_pa)%in%c(scen_var,'dem_index')])
setnames(pif_table,scen_var,'outcome')
pif_temp <- pif_table[,.(sum(outcome)),by='dem_index']
## sort pif_temp
setorder(pif_temp,dem_index)
pif_scen[[pif_name]] <- (pif_ref[,V1] - pif_temp[,V1]) / pif_ref[,V1]
}
}
}
return(pif_scen)
}
(pif_table <- health_burden_2(RR_PA_AP_calculations))
for(scen in 1:NSCEN+1)
for(i in 2:ncol(injury_ratios_for_bz[[scen]])) {
injury_col_name <- colnames(injury_ratios_for_bz[[scen]])[i]
pif_table[[paste0(SCEN_SHORT_NAME[scen],'_',injury_col_name)]] <- injury_ratios_for_bz[[scen]][[i]]/injury_ratios_for_bz[[1]][[i]]
}
hb_2 <- belens_function(pif_table)
pathway_hb <- NULL
constant_mode <- T
if(constant_mode) {
pathway_hb <- health_burden(RR_PA_AP_calculations,deaths_yll_injuries$deaths_yll_injuries,combined_AP_PA=F)
pathway_pif_table <- health_burden_2(RR_PA_AP_calculations,combined_AP_PA=F)
x11(); plot(pif_table$scen_pif_pa_ap_ihd,1-(1-pathway_pif_table$scen_pif_pa_ihd)*(1-pathway_pif_table$scen_pif_ap_ihd))
}
#####################################################################
## plot
{x11(width=9,height=6); par(mar=c(6,5,1,1),mfrow=c(1,2))
for(type in c('deaths','ylls')){
plot_cols <- sapply(names(hb[[type]]),function(x)grepl('scen',x))
outcomes <- colSums(hb[[type]][,plot_cols])
names(outcomes) <- sapply(names(outcomes),function(x)last(strsplit(x,'_')[[1]]))
barplot(outcomes,las=2,cex.axis=1.5,cex.lab=1.5,ylab=paste0('Number of ',type,' averted in Scenario'),xlab='',cex.names=1.5)
}
}
## DATA FILES FOR MODEL
DISEASE_INVENTORY <<- read.csv(paste0("inputs/dose_response/disease_outcomes_lookup.csv"))
DISEASE_INVENTORY
## DATA FILES FOR MODEL
DISEASE_INVENTORY <<- read.csv(paste0("inputs/dose_response/disease_outcomes_lookup.csv"))
DISEASE_INVENTORY
source('~/overflow_dropbox/mh-execute/metahit_script.R', echo=TRUE)
#' @export
health_burden_2 <- function(ind_ap_pa,combined_AP_PA=T){
pop_details <- DEMOGRAPHIC
pif_scen <- pop_details
# set up reference (scen1)
reference_scenario <- SCEN_SHORT_NAME[which(SCEN==REFERENCE_SCENARIO)]
scen_names <- SCEN_SHORT_NAME[SCEN_SHORT_NAME!=reference_scenario]
### iterating over all all disease outcomes
for ( j in 1:nrow(DISEASE_INVENTORY)){
# Disease acronym and full name
ac <- as.character(DISEASE_INVENTORY$acronym[j])
gbd_dn <- as.character(DISEASE_INVENTORY$GBD_name[j])
# calculating health outcome, or independent pathways?
pathways_to_calculate <- ifelse(combined_AP_PA,1,DISEASE_INVENTORY$physical_activity[j]+DISEASE_INVENTORY$air_pollution[j])
for(path in 1:pathways_to_calculate){
# set up column names
if(combined_AP_PA){
middle_bit <-
paste0(
ifelse(DISEASE_INVENTORY$physical_activity[j] == 1, 'pa_', ''),
ifelse(DISEASE_INVENTORY$air_pollution[j] == 1, 'ap_', '')
)
middle_bit_plus <-
paste0(
ifelse(DISEASE_INVENTORY$physical_activity[j] == 1, 'pa_', ''),
ifelse(DISEASE_INVENTORY$air_pollution[j] == 1, 'ap_', ''),
ifelse(DISEASE_INVENTORY$noise[j] == 1, 'noise_', ''),
ifelse(DISEASE_INVENTORY$nitrogen_dioxide[j] == 1, 'no2_', '')
)
}else{
# if independent, choose which one
middle_bit <- middle_bit_plus <- c('pa_','ap_')[which(c(DISEASE_INVENTORY$physical_activity[j],DISEASE_INVENTORY$air_pollution[j])==1)[path]]
}
base_var <- paste0('RR_', middle_bit, reference_scenario, '_', ac)
scen_vars <- paste0('RR_', middle_bit, scen_names, '_', ac)
# set up pif tables
pif_table <- setDT(ind_ap_pa[,colnames(ind_ap_pa)%in%c(base_var,'dem_index')])
setnames(pif_table,base_var,'outcome')
pif_ref <- pif_table[,.(sum(outcome)),by='dem_index']
## sort pif_ref
setorder(pif_ref,dem_index)
for (index in 1:length(scen_vars)){
# set up naming conventions
scen <- scen_names[index]
scen_var <- scen_vars[index]
pif_name <- paste0(scen, '_pif_',middle_bit_plus,ac)
# Calculate PIFs for selected scenario
pif_table <- setDT(ind_ap_pa[,colnames(ind_ap_pa)%in%c(scen_var,'dem_index')])
setnames(pif_table,scen_var,'outcome')
pif_temp <- pif_table[,.(sum(outcome)),by='dem_index']
## sort pif_temp
setorder(pif_temp,dem_index)
pif_scen[[pif_name]] <- (pif_ref[,V1] - pif_temp[,V1]) / pif_ref[,V1]
}
}
}
return(pif_scen)
}
source('~/overflow_dropbox/mh-execute/metahit_script.R', echo=TRUE)
pif_table$scen_pif_pa_ap_ihd
pif_table$scen_pif_pa_ap_noise_no2_ihd
x11(); plot(pif_table$scen_pif_pa_ap_noise_no2_ihd,1-(1-pathway_pif_table$scen_pif_pa_ihd)*(1-pathway_pif_table$scen_pif_ap_ihd))
source('~/overflow_dropbox/mh-execute/metahit_script.R', echo=TRUE)
pif_table
for(scen in 1:NSCEN+1)
for(i in 2:ncol(injury_ratios_for_bz[[scen]])) {
injury_col_name <- colnames(injury_ratios_for_bz[[scen]])[i]
pif_table[[paste0(SCEN_SHORT_NAME[scen],'_',injury_col_name)]] <- injury_ratios_for_bz[[scen]][[i]]/injury_ratios_for_bz[[1]][[i]]
}
pif_table
injury_ratios_for_bz
x11(); plot(pif_table$scen_pif_pa_ap_noise_no2_ihd,1-(1-pathway_pif_table$scen_pif_pa_ihd)*(1-pathway_pif_table$scen_pif_ap_ihd))
load("C:/Users/Anna Goodman/Dropbox/GitHub/mh-execute/inputs/scenarios/SPind_E06000022_subdivide.Rds")
load1 <- readRDS("C:/Users/Anna Goodman/Dropbox/GitHub/mh-execute/inputs/scenarios/SPind_E06000022_subdivide.Rds")
load2 <- readRDS("C:/Users/Anna Goodman/Dropbox/GitHub/mh-execute/inputs/scenarios/SPind_E06000023_subdivide.Rds")
load4 <- readRDS("C:/Users/Anna Goodman/Dropbox/GitHub/mh-execute/inputs/scenarios/SPind_E06000025_subdivide.Rds")
load3 <- readRDS("C:/Users/Anna Goodman/Dropbox/GitHub/mh-execute/inputs/scenarios/SPind_E06000024_subdivide.Rds")
load <- rbind(load1, load2)
load <- rbind(load, load3)
load <- rbind(load, load4)
write_csv(load, file.path(paste0("temp.csv")))
library(foreign)
library(tidyverse)
library(rgdal)
library(raster)
library(stplanr)
library(SDraw)
library(geojsonio)
library(raster)
write_csv(load, file.path(paste0("temp.csv")))
load("C:/Users/Anna Goodman/Dropbox/GitHub/mh-execute/inputs/scenarios/SPind_E06000022_subdivide.Rds")
le <- readRDS("C:/Users/Anna Goodman/Dropbox/GitHub/mh-execute/inputs/scenarios/SPind_E06000022_subdivide.Rds")
summary(le$base_cycle_wkkm_d4)
load("C:/Users/Anna Goodman/Dropbox/GitHub/mh-execute/inputs/scenarios/SPind_E06000022_subdivide - Copy.Rds")
old <- readRDS("C:/Users/Anna Goodman/Dropbox/GitHub/mh-execute/inputs/scenarios/SPind_E06000022_subdivide - Copy.Rds")
new <- readRDS("C:/Users/Anna Goodman/Dropbox/GitHub/mh-execute/inputs/scenarios/SPind_E06000022_subdivide.Rds")
summary(old$scen_bus_wkkm_d1)
summary(newld$scen_bus_wkkm_d1)
summary(new$scen_bus_wkkm_d1)
summary(new$scen_bus_wkkm_d4)
summary(new$scen_bus_wkkm_d3)
summary(old$scen_bus_wkkm_d3)
summary(old)
summary(old$scen_cycle_wkkm_d1)
summary(new$scen_cycle_wkkm_d1)
summary(new$scen_cycle_wkkm_d2)
summary(old$scen_cycle_wkkm_d2)
summary(old$scen_cycle_wkkm_d3)
summary(new$scen_cycle_wkkm_d3)
1.09+1.53+1.26
.60+.78+2.5
summary(new$scen_cardrive_wkkm_d4)
summary(oldw$scen_cardrive_wkkm_d4)
summary(old$scen_cardrive_wkkm_d4)
summary(old$scen_cardrive_wkkm_d2)
summary(new$scen_cardrive_wkkm_d2)
